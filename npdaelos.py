# -*- coding: utf-8 -*-
"""npdaelos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fTll1m1pIW0dzGYmvj9FSH5ysAozO6lV
"""

import pandas as pd
from datascience import *
import numpy as np
import random
from sys import exit
from scipy import stats
from operator import itemgetter
import math
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
print('x' in np.arange(5))

def calc(link, rounds, k, pre_elos):
  # GET ENTRIES
  raw = pd.read_html(link)
  entries = make_array()
  for i in np.arange(len(raw)):
    one_team = np.array(raw[i].columns.tolist()).item(0)
    entries = np.append(entries, one_team)
  # Get Swapped Entries
  all_swapped = make_array()
  for i in np.arange(np.count_nonzero(entries)):
    entry_array = np.array(entries.item(i).split(' - '))
    school = entry_array.item(0)
    name1 = np.array(entry_array.item(1).split(' & ')).item(0)
    name2 = np.array(entry_array.item(1).split(' & ')).item(1)
    swapped = school + ' - ' + name2 + ' & ' + name1
    all_swapped = np.append(all_swapped, swapped)
  # add new teams
  team_database = pre_elos.column('Team')
  elo_database = pre_elos.column('Elo')
  for i in np.arange(len(entries)):
      if np.sum(entries.item(i) == team_database) == 1:
          team_database = team_database
          elo_database = elo_database
      elif np.sum(all_swapped.item(i) == team_database) == 1:
          new_team_database = make_array()
          for j in np.arange(len(team_database)):
              if all_swapped.item(i) != team_database.item(j):
                  new_total = team_database.item(j)
              else:
                  new_total = entries.item(i)
              new_team_database = np.append(new_team_database, new_total)
          team_database = new_team_database
      else:
          team_database = np.append(team_database, entries.item(i))
          elo_database = np.append(elo_database, 1500)
  elo_list = pre_elos.select().with_columns('Team', team_database, 'Elo', elo_database)
  teams_total = team_database
  elos_total = elo_database
  # Calc the Tournament
  # Loop for each round
  for i in np.arange(1, rounds + 1):
    round_elos = make_array()
    for j in np.arange(len(entries)):
      team_table = Table.from_df(pd.read_html(link)[j])
      team1 = entries.item(j)
      if i > team_table.num_rows - 1:
        calc = Table().with_column('Team', make_array(team1)).join('Team', elo_list, 'Team')
        round_elos = np.append(round_elos, calc.column(1).item(0))
      else:
          team2 = team_table.column(2).item(i)
          calc = Table().with_columns('Team 1', make_array(team1), 'Team 2', make_array(team2))
          if team2 == 'ZZ':
            calc = calc.join('Team 1', elo_list, 'Team')
            round_elos = np.append(round_elos, calc.column(2).item(0))
          else:
            calc = calc.join('Team 1', elo_list, 'Team').join('Team 2', elo_list, 'Team').select('Team 1', 'Team 2', 'Elo', 'Elo_2')
            elo_diff = calc.column(2).item(0) - calc.column(3).item(0)
            win_prob = 1 / (math.pow(10.0, (-elo_diff / 400.0)) + 1.0)
            calc = calc.with_column('Probability', make_array(win_prob))
            if np.array(team_table.column(4).item(i).split(' ')).item(0) == 'W':
              calc = calc.with_column('Result', make_array(1))
            elif np.array(team_table.column(4).item(i).split(' ')).item(0) == 'L':
              calc = calc.with_column('Result', make_array(0))
            if len(np.array(team_table.column(4).item(i).split(' ')).item(0)) > 1:
              calc = calc.with_column('New Elo', make_array(((k + 10) * (calc.column(5).item(0) - calc.column(4).item(0))) + calc.column(2).item(0)))
            else:
              calc = calc.with_column('New Elo', make_array((k * (calc.column(5).item(0) - calc.column(4).item(0))) + calc.column(2).item(0)))
            round_elos = np.append(round_elos, calc.column(6).item(0))
    teams_total = np.append(teams_total, entries)
    elos_total = np.append(elos_total, round_elos)
    new_elo_table = Table().with_columns('Team', teams_total, 'Elo', elos_total).to_df()
    elo_list = Table.from_df(new_elo_table.groupby('Team', as_index = False).agg(Elo = ('Elo', 'last')))

  return elo_list

def tab(teams, elos, pre_elos):
  teams_total = np.append(pre_elos.column(0), teams)
  elos_total = np.append(pre_elos.column(1), elos)
  new_elo_table = Table().with_columns('Team', teams_total, 'Elo', elos_total).to_df()
  elo_list = Table.from_df(new_elo_table.groupby('Team', as_index = False).agg(Elo = ('Elo', 'last')))
  return elo_list

final2223 = Table().with_columns('Team', make_array("Saint Mary's College - Molly Floberg & Sam Goodman", 'William Jewell College - Kandace Gill & Owen Kerrigan'), 'Elo', make_array(1435.63, 1489.04))

fall2023 = calc('https://forensicstournament.net/FridayGGO/23/results/et/51936', 6, 26, final2223)

fall2023 = tab(make_array("Concordia University Irvine - Riley Maszk & Michael Shurance","Mckendree University - Keon Butchee & Alex Duncan","Mckendree University - Aaron Brown & Meera Mohammad","McKendree University - Garrett Crabtree & Erik Hovlid","McKendree University - Elan Headlee & Jada Tolbert","Mercer University - Niyati Patel & Chirayu Salgarkar","Parliamentary Debate at Berkeley - Holden Carrillo & Arjun Banerjee","Parliamentary Debate at Berkeley - Tristan Keene & Brenna Seiersen","Rice University - Anna Phan & William Wang","Rice University - Maximus Renteria & Arjun Surya","Rice University - Rahul Shah & Rohan Gupta","Rice University - Nikki Stancik & Rija Naqvi","Rice University - Kyle Sanderfer & Claire Wang","Rice University - Manna Trevino & Kelly Yang","University of Texas at Tyler - Aidan Birjandi & Anna Herrig","University of Texas at Tyler - Leilani Hurtado & Zachary Stansbery","University of Texas at Tyler - Anthony Rodriguez & Rebecca Wood","University of Texas at Tyler - Angie Carroll & Mason Smith","Notre Dame University - Ethan Chiang & Liam Kelly","Notre Dame University - Sam Marchand & Ashwin Raghuraman","University of Utah - Madeleine Felix & Samantha Watrin","University of Utah - Adelyn Kobe & Courtney Hardie","Whitman College - Alexa Grechishkin & Kyle Mathy","Whitman College - Kasey Moulton & Jas Liu"), make_array(1475.81766629361,1417.24295105532,1495.5551808415,1444.33161872983,1415.45887053322,1504.35913848444,1711.10622864513,1856.16873932831,1528.90231569332,1710.50702331149,1541.64489595505,1571.66971388549,1527.22080263276,1584.328981384,1510.2872104075,1534.32837133821,1458.70246873322,1446.44152691194,1483.35580491355,1481.7527260288,1500.35872716315,1482.25748772699,1736.06959533541,1778.74195466778), fall2023)

fall2023 = tab(make_array("Parliamentary Debate at Berkeley - Holden Carrillo & Arjun Banerjee","Parliamentary Debate at Berkeley - Tristan Keene & Brenna Seiersen","Rice University - Anna Phan & William Wang","Rice University - Maximus Renteria & Arjun Surya","Rice University - Kyle Sanderfer & Claire Wang","Rice University - Manna Trevino & Kelly Yang","Rice University - Nikki Stancik & Rija Naqvi","San Diego State University - Ryan Bartl & Spencer Simon","Tulane University - Emma Basch & Hannah Fewkes","Tulane University - Mikayla Fairchild & Lawrence Jin","University of the Pacific - Angelica Guzman & Daneli Santillan","University of the Pacific - Sarah Campi & Axel Amador","University of Utah - Adelyn Kobe & Meredith Jenkins","University of Utah - Madeleine Felix & Samantha Watrin","Whitman College - Alexa Grechishkin & Kyle Mathy","Whitman College - Kasey Moulton & Jas Liu"), make_array(1710.02660459733,1862.30723676436,1548.2891953307,1712.13046308432,1556.71579013999,1577.90181244316,1560.12407389757,1489.38000635259,1536.26525880262,1477.75729574353,1522.9677083307,1459.36721545352,1477.08402764329,1568.68131904023,1758.42934312583,1817.45000910288), fall2023)

fall2023 = tab(make_array("Mckendree University - Aaron Brown & Meera Mohammad","Mckendree University - Alex Duncan & Jada Tolbert","Mercer University - Niyati Patel & Jayla Owens","Mercer University - Chirayu Salgarkar & Thomas Bartlett","Morehouse College - Eric Anders & Clarence Sanders","Morehouse College - Trey Causey & Kibwe Basdeo","Morehouse College - Chijindum Dike & Jonathan Dolsey","Morehouse College - Hasan Henry & Dalton Favors","Rice University - Nikki Stancik & Rija Naqvi","Rice University - Kyle Sanderfer & Arjun Surya","Rice University - Manna Trevino & Anna Phan","University of Texas at Tyler - Aidan Birjandi & Anna Herrig","University of Texas at Tyler - Angie Carroll & Mason Smith","University of Texas at Tyler - Leilani Hurtado & Zachary Stansbery","University of Texas at Tyler - Anthony Rodriguez & Rebecca Wood","William Jewell College - Trent Dixon & Patrick Terry","William Jewell College - Kandace-Rose Gill & Paige Tretter"), make_array(1494.98700503053,1437.70128439891,1514.70310194302,1500.34320248916,1469.81539491437,1467.25016890269,1470.9123598332,1484.66313139173,1582.17852282543,1570.17872735938,1513.7034530351,1577.35387786066,1443.70125315507,1587.78635503974,1468.66911036923,1548.86909638595,1453.25395506583), fall2023)

fall2023 = calc('https://forensicstournament.net/SunsetCliffsClassic/23/results/et/52318', 6, 29, fall2023)

fall2023 = calc('https://forensicstournament.net/crossmaninvitational/23/results/et/52857',8, 27, fall2023)

fall2023 = tab(make_array("Parliamentary Debate at Berkeley - Kyleen Lin & Scott Schuster","Concordia University Irvine - Daniel Boyle & Andrew Reeder","Concordia University Irvine - Benjamin Wagner & Hudson Winchel","Diablo Valley College - Ameya Puranik & Jason Sabbadini","Diablo Valley College - Bobby Rentfro & Teo Buegeleisen","Diablo Valley College - Harsimar (Sim) Saini & Emily Hitomi","Rice University - Anna Phan & William Wang","Rice University - Kyle Sanderfer & Manna Trevino","Rice University - Maximus Renteria & Arjun Surya","Rice University - Nikki Stancik & Rija Naqvi","Rice University - Rohun Gupta & Kelly Yang","Debate at UC Davis - Jackson Huston & Justin Davis","University of the Pacific - Sarah Campi & Axel Amador","University of the Pacific - Angelica Guzman & Daneli Santillan","Whitman College - Alexa Grechishkin & Kyle Mathy","Whitman College - Kasey Moulton & Jas Liu"), make_array(1493.52198269254,1463.4154327279,1448.57805995047,1487.37336423426,1434.56375608412,1498.72778404524,1561.98809214712,1549.82989091106,1709.10472975588,1695.86378714284,1483.58572965437,1496.38064582682,1425.04073620191,1564.85595421716,1723.88733967222,1806.58271473608), fall2023)

fall2023 = calc('https://forensicstournament.net/Griffin/23/results/et/52524', 6, 25, fall2023)

fall2023 = calc('https://forensicstournament.net/TheDVCThingSunday/23/results/et/51671', 6, 33, fall2023)

fall2023 = tab(make_array("McKendree University - Elan Headlee & Garrett Crabtree","McKendree University - Erik Hovlid & Alex Duncan","Saint Mary's College - Katelyn Bolton & India Maine","Saint Mary's College - Molly Floberg & Sam Goodman","Saint Mary's College - Jasper Pacheco & Rose Velasquez","Whitman College - Grace Canny & Kasey Moulton","Whitman College - Alexa Grechishkin & Wren Snow","Whitman College - Jas Liu & Sophia Pilling","Whitman College - Kyle Mathy & Heather Romero Michel","William Jewell College - Trent Dixon & Patrick Terry"), make_array(1446.13338957701,1484.27359763561,1419.33782986317,1385.8396254351,1507.76652066224,1546.80549537186,1562.7809289638,1510.61501641555,1577.23314893072,1543.71444714495), fall2023)

spring2024 = tab(make_array("Kansas City Kansas Community College - Chris Lapee & Bailey Campbell","Mckendree University - Aaron Brown & Meera Mohammad","McKendree University - Meera Mohammad & Elan Headlee","McKendree University - Garrett Crabtree & Jada Tolbert","Mercer University - Niyati Patel & Jayla Owens","Mercer University - Nolan Ralls & Mya Kimbrough","Mercer University - Chirayu Salgarkar & Thomas Bartlett","Parliamentary Debate at Berkeley - Holden Carrillo & Arjun Banerjee","Parliamentary Debate at Berkeley - Tristan Keene & Brenna Seiersen","Parliamentary Debate at Berkeley - Scott Schuster & Kyleen Lin","Rice University - Maximus Renteria & Arjun Surya","Rice University - Kyle Sanderfer & Nikki Stancik","Rice University - Manna Trevino & Kelly Yang","University of Texas at Tyler - Rebecca Wood & Patrick Terry","University of Texas at Tyler - Leilani Hurtado & Zachary Stansbery","University of Texas at Tyler - Aidan Birjandi & Anthony Rodriguez","University of Texas at Tyler - Josh Smith & Anna Herrig","University of the Pacific - Angelica Guzman & Daneli Santillan","William Jewell College - Kandace-Rose Gill & Mekhi Brooks","William Jewell College - Trent Dixon & Patrick Terry","University of Texas at Tyler - Rebecca Wood"), make_array(1563.73014479251,1496.75213167357,1438.30689442847,1419.5703048305,1461.29253261116,1396.32978452769,1487.36438719019,1722.00716306707,1948.71121968891,1513.05236696984,1737.34549377055,1584.69752360198,1521.32555201031,1468.22376009872,1564.73825804014,1517.66851359581,1642.22670893404,1521.39131016803,1483.88831333464,1562.8944032911,1476.76639724556), fall2023)

def utah(link, rounds, k, pre_elos):
  # GET ENTRIES
  raw = pd.read_html(link)
  entries = make_array()
  for i in np.arange(len(raw)):
    one_team = np.array(raw[i].columns.tolist()).item(0)
    entries = np.append(entries, one_team)
  # Get Swapped Entries
  all_swapped = make_array()
  for i in np.arange(np.count_nonzero(entries)):
    entry_array = np.array(entries.item(i).split(' - '))
    school = entry_array.item(0)
    name1 = np.array(entry_array.item(1).split(' & ')).item(0)
    name2 = np.array(entry_array.item(1).split(' & ')).item(1)
    swapped = school + ' - ' + name2 + ' & ' + name1
    all_swapped = np.append(all_swapped, swapped)
  # add new teams
  team_database = pre_elos.column('Team')
  elo_database = pre_elos.column('Elo')
  for i in np.arange(len(entries)):
      if np.sum(entries.item(i) == team_database) == 1:
          team_database = team_database
          elo_database = elo_database
      elif np.sum(all_swapped.item(i) == team_database) == 1:
          new_team_database = make_array()
          for j in np.arange(len(team_database)):
              if all_swapped.item(i) != team_database.item(j):
                  new_total = team_database.item(j)
              else:
                  new_total = entries.item(i)
              new_team_database = np.append(new_team_database, new_total)
          team_database = new_team_database
      else:
          team_database = np.append(team_database, entries.item(i))
          elo_database = np.append(elo_database, 1500)
  elo_list = pre_elos.select().with_columns('Team', team_database, 'Elo', elo_database)
  teams_total = team_database
  elos_total = elo_database
  # Calc the Tournament
  # Loop for each round
  for i in np.arange(1, rounds + 1):
    round_elos = make_array()
    for j in np.arange(len(entries)):
      team_table = Table.from_df(pd.read_html(link)[j])
      team1 = entries.item(j)
      if i > team_table.num_rows - 1:
        calc = Table().with_column('Team', make_array(team1)).join('Team', elo_list, 'Team')
        round_elos = np.append(round_elos, calc.column(1).item(0))
      else:
          team2 = team_table.column(2).item(i)
          calc = Table().with_columns('Team 1', make_array(team1), 'Team 2', make_array(team2))
          if team2 == 'ZZ':
            calc = calc.join('Team 1', elo_list, 'Team')
            round_elos = np.append(round_elos, calc.column(2).item(0))
          elif team2 == 'San Joaquin Delta College - Eric Cardenas & Benjamin Brogger':
            calc = calc.join('Team 1', elo_list, 'Team')
            round_elos = np.append(round_elos, calc.column(2).item(0))
          else:
            calc = calc.join('Team 1', elo_list, 'Team').join('Team 2', elo_list, 'Team').select('Team 1', 'Team 2', 'Elo', 'Elo_2')
            elo_diff = calc.column(2).item(0) - calc.column(3).item(0)
            win_prob = 1 / (math.pow(10.0, (-elo_diff / 400.0)) + 1.0)
            calc = calc.with_column('Probability', make_array(win_prob))
            if np.array(team_table.column(4).item(i).split(' ')).item(0) == 'W':
              calc = calc.with_column('Result', make_array(1))
            elif np.array(team_table.column(4).item(i).split(' ')).item(0) == 'L':
              calc = calc.with_column('Result', make_array(0))
            if len(np.array(team_table.column(4).item(i).split(' ')).item(0)) > 1:
              calc = calc.with_column('New Elo', make_array(((k + 10) * (calc.column(5).item(0) - calc.column(4).item(0))) + calc.column(2).item(0)))
            else:
              calc = calc.with_column('New Elo', make_array((k * (calc.column(5).item(0) - calc.column(4).item(0))) + calc.column(2).item(0)))
            round_elos = np.append(round_elos, calc.column(6).item(0))
    teams_total = np.append(teams_total, entries)
    elos_total = np.append(elos_total, round_elos)
    new_elo_table = Table().with_columns('Team', teams_total, 'Elo', elos_total).to_df()
    elo_list = Table.from_df(new_elo_table.groupby('Team', as_index = False).agg(Elo = ('Elo', 'last')))

  return elo_list

spring2024 = utah('https://forensicstournament.net/GreatSaltLake/24/results/et/53102', 7, 26, spring2024)

spring2024 = calc('https://forensicstournament.net/JanesseDavidsonMemorial/24/results/et/52216', 8, 34, spring2024)
spring2024 = calc('https://forensicstournament.net/goldeneagle/24/results/et/53883', 6, 32, spring2024)

spring2024 = calc('https://forensicstournament.net/GaskeInvitational/24/results/et/53954', 7, 32, spring2024)

spring2024 = calc('https://forensicstournament.net/TalkHawk/24/results/et/51908', 8, 24, spring2024)
spring2024 = calc('https://forensicstournament.net/taborvenitsky/24/results/et/53144', 6, 24, spring2024)
spring2024 = calc('https://forensicstournament.net/NCFASpringChamps/24/results/et/54344', 7, 26, spring2024)
spring2024 = calc('https://forensicstournament.net/PSCFASpringChamps/24/results/et/53922', 6, 25, spring2024)

rk = make_array()
for i in np.arange(1, spring2024.num_rows + 1):
  rk = np.append(rk, i)

new = spring2024.sort('Elo', descending = True).with_column('Rank', rk).select('Rank', 'Team', 'Elo')